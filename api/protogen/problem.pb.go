// Code generated by protoc-gen-go. DO NOT EDIT.
// source: problem.proto

package protogen

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CreateProblemRequest holds fields required for the CreateProblem operation.
type CreateProblemRequest struct {
	Problem              *Problem `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateProblemRequest) Reset()         { *m = CreateProblemRequest{} }
func (m *CreateProblemRequest) String() string { return proto.CompactTextString(m) }
func (*CreateProblemRequest) ProtoMessage()    {}
func (*CreateProblemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{0}
}

func (m *CreateProblemRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProblemRequest.Unmarshal(m, b)
}
func (m *CreateProblemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProblemRequest.Marshal(b, m, deterministic)
}
func (m *CreateProblemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProblemRequest.Merge(m, src)
}
func (m *CreateProblemRequest) XXX_Size() int {
	return xxx_messageInfo_CreateProblemRequest.Size(m)
}
func (m *CreateProblemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProblemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProblemRequest proto.InternalMessageInfo

func (m *CreateProblemRequest) GetProblem() *Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

// Problem represents a programming problem with specific inputs and correct outputs.
type Problem struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Problem) Reset()         { *m = Problem{} }
func (m *Problem) String() string { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()    {}
func (*Problem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b319862c9661813c, []int{1}
}

func (m *Problem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Problem.Unmarshal(m, b)
}
func (m *Problem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Problem.Marshal(b, m, deterministic)
}
func (m *Problem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Problem.Merge(m, src)
}
func (m *Problem) XXX_Size() int {
	return xxx_messageInfo_Problem.Size(m)
}
func (m *Problem) XXX_DiscardUnknown() {
	xxx_messageInfo_Problem.DiscardUnknown(m)
}

var xxx_messageInfo_Problem proto.InternalMessageInfo

func (m *Problem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateProblemRequest)(nil), "fd8_judge_api.CreateProblemRequest")
	proto.RegisterType((*Problem)(nil), "fd8_judge_api.Problem")
}

func init() { proto.RegisterFile("problem.proto", fileDescriptor_b319862c9661813c) }

var fileDescriptor_b319862c9661813c = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x28, 0xca, 0x4f,
	0xca, 0x49, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4d, 0x4b, 0xb1, 0x88, 0xcf,
	0x2a, 0x4d, 0x49, 0x4f, 0x8d, 0x4f, 0x2c, 0xc8, 0x54, 0xf2, 0xe0, 0x12, 0x71, 0x2e, 0x4a, 0x4d,
	0x2c, 0x49, 0x0d, 0x80, 0xa8, 0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x32, 0xe0, 0x62,
	0x87, 0xea, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0x12, 0xd3, 0x43, 0xd1, 0xa8, 0x07, 0x53,
	0x0f, 0x53, 0xa6, 0x24, 0xcd, 0xc5, 0x0e, 0x15, 0x13, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x04,
	0x6b, 0xe4, 0x0c, 0x02, 0x31, 0x9d, 0xb8, 0xa2, 0x38, 0xc0, 0xd6, 0xa7, 0xa7, 0xe6, 0x25, 0xb1,
	0x81, 0x59, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x97, 0x58, 0x52, 0x99, 0x00, 0x00,
	0x00,
}
