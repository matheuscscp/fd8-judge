// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/program/program.go

// Package program is a generated GoMock package.
package program

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	exec "os/exec"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Compile mocks base method
func (m *MockService) Compile(ctx context.Context, sourceRelativePath, binaryRelativePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compile", ctx, sourceRelativePath, binaryRelativePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compile indicates an expected call of Compile
func (mr *MockServiceMockRecorder) Compile(ctx, sourceRelativePath, binaryRelativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compile", reflect.TypeOf((*MockService)(nil).Compile), ctx, sourceRelativePath, binaryRelativePath)
}

// GetExecutionCommand mocks base method
func (m *MockService) GetExecutionCommand(ctx context.Context, sourceRelativePath, binaryRelativePath string) *exec.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionCommand", ctx, sourceRelativePath, binaryRelativePath)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// GetExecutionCommand indicates an expected call of GetExecutionCommand
func (mr *MockServiceMockRecorder) GetExecutionCommand(ctx, sourceRelativePath, binaryRelativePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionCommand", reflect.TypeOf((*MockService)(nil).GetExecutionCommand), ctx, sourceRelativePath, binaryRelativePath)
}

// GetSourceFileExtension mocks base method
func (m *MockService) GetSourceFileExtension() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceFileExtension")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourceFileExtension indicates an expected call of GetSourceFileExtension
func (mr *MockServiceMockRecorder) GetSourceFileExtension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceFileExtension", reflect.TypeOf((*MockService)(nil).GetSourceFileExtension))
}

// GetBinaryFileExtension mocks base method
func (m *MockService) GetBinaryFileExtension() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinaryFileExtension")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBinaryFileExtension indicates an expected call of GetBinaryFileExtension
func (mr *MockServiceMockRecorder) GetBinaryFileExtension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinaryFileExtension", reflect.TypeOf((*MockService)(nil).GetBinaryFileExtension))
}

// MockserviceRuntime is a mock of serviceRuntime interface
type MockserviceRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockserviceRuntimeMockRecorder
}

// MockserviceRuntimeMockRecorder is the mock recorder for MockserviceRuntime
type MockserviceRuntimeMockRecorder struct {
	mock *MockserviceRuntime
}

// NewMockserviceRuntime creates a new mock instance
func NewMockserviceRuntime(ctrl *gomock.Controller) *MockserviceRuntime {
	mock := &MockserviceRuntime{ctrl: ctrl}
	mock.recorder = &MockserviceRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockserviceRuntime) EXPECT() *MockserviceRuntimeMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockserviceRuntime) Run(cmd *exec.Cmd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockserviceRuntimeMockRecorder) Run(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockserviceRuntime)(nil).Run), cmd)
}
